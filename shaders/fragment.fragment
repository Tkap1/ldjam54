
layout(origin_upper_left) in vec4 gl_FragCoord;

in flat s_transform v_t;
in flat vec3 v_color;
in vec2 v_uv;
in vec2 v_local_uv;

out vec4 out_color;

uniform vec2 base_res;
uniform vec2 window_size;
uniform float time;
uniform vec2 player_pos;

layout (location = 0) uniform sampler2D in_texture;
layout (location = 1) uniform sampler2D noise;

vec2 n22(vec2 p)
{
	vec3 a = fract(p.xyx * vec3(123.34, 234.34, 345.65));
	a += dot(a, a + 34.45);
	return fract(vec2(a.x * a.y, a.y * a.z));
}

float range_lerp(float val, float amin, float amax, float bmin, float bmax)
{
	float p = (val - amin) / (amax - amin);
	return bmin + (bmax - bmin) * p;
}

float sin2(float s)
{
	return sin(s) * 0.5 + 0.5;
}

vec4 pma(vec4 col)
{
	return vec4(col.rgb * col.a, col.a);
}

bool point_in_rect_topleft(vec2 point, vec2 pos, vec2 size)
{
	return point.x >= pos.x && point.x <= pos.x + size.x && point.y >= pos.y && point.y <= pos.y + size.y;
}

vec3 circle(vec2 pos, vec2 uv, float radius)
{
	vec2 ar = vec2(1.0, base_res.y / base_res.x);
	pos *= ar;
	uv *= ar;
	float d = distance(pos, uv);
	d = smoothstep(radius, 0.0, d);
	// return vec3(d * 0.1, d * 0.4, d);
	return vec3(d);
}

void main()
{
	s_transform t = v_t;
	vec4 color;

	if(t.texture_id != 0)
	{
		color = texture(in_texture, v_uv) * t.color;
		color.rgb = mix(color.rgb, t.mix_color.rgb, t.mix_weight);
	}
	else
	{
		color = t.color;
		color.rgb = mix(color.rgb, t.mix_color.rgb, t.mix_weight);
	}

	if(t.do_circle != 0)
	{
		float d = distance(v_local_uv, vec2(0.5));
		color.a *= smoothstep(0.499, 0.3, d);
	}
	if(t.do_noise != 0)
	{
		float d = distance(v_local_uv, vec2(0.5));
		float n = texture(noise, v_local_uv * 0.35 * d + time * 0.1).r;
		// n -= 0.4;
		// n = max(0.0, n);
		// n = pow(n, 0.25);
		n = smoothstep(0.4, 0.8, n);
		n = pow(n, smoothstep(0.2, 0.3, d));
		color.rgb *= n;
	}

	// @Note(tkap, 01/10/2023): kill area
	if(t.effect_id == 1)
	{
		// vec2 uv = v_local_uv;
		// color.rgb = vec3(1.0,0,0);
		// float t = sin(time * 0.5) * 2.0;
		// float mag = range_lerp(sin(time + uv.x * 7.0), -1, 1, 0.0, 0.3);
		// float foo = 0.1 + mag;
		// float arg = uv.y + foo + foo * cos(t + uv.x * 50);
		// color.g = clamp((1.0 - arg) * 1, 0.0, 1.0);
		// color.a = clamp((1.0 - arg) * 30, 0.0, 1.0);

		vec2 frag = gl_FragCoord.xy;
		vec2 ar = vec2(window_size.x / base_res.x, window_size.y / base_res.y);
		frag /= ar;
		frag.x += player_pos.x;

		float height = t.draw_size.y;
		float edge_size = 100;
		float edge = height - edge_size;
		vec2 uv = frag / height;
		color.rgb = vec3(0.3, 0.1, 0.7);
		if(frag.y > edge)
		{
			float a = sin(player_pos.x * 0.1 + v_local_uv.x * 200) * 0.2;
			float b = sin(player_pos.x * 0.1 + v_local_uv.x * 150 + time * 5) * 0.1;
			a += b;
			float uv = (frag.y - edge) / edge_size;
			color.a = pow(1-uv + a, 2);
			if(color.a < 0.1) { discard; }
			color.a = step(0.1, color.a);
		}
		float n = texture(noise, frag * 0.001).r;
		n = pow(n, 0.5);
		color.rgb += vec3(smoothstep(0.7, 1.5, n), 0, 0);
		color.rgb *= n;
		color.rgb *= 0.75;

	}

	// @Note(tkap, 01/10/2023): Background
	else if(t.effect_id == 2)
	{
		float p = player_pos.y / 32768.0;
		vec2 ar = vec2(1.0, base_res.y / base_res.x);
		vec2 uv = v_local_uv * ar;
		float t = time * 0.05;
		uv = uv * 2 - 1;

		uv *= 15 * range_lerp(sin(time * 0.1), -1, 1, 0.9, 1.0);
		ivec2 id = ivec2(floor(uv.x+t)+1, floor(uv.y+t)+1);
		float r = n22(vec2(id.x, id.y)).x;
		float g = n22(vec2(id.x+1000, id.y)).x;
		float b = n22(vec2(id.x, id.y+1000)).x;

		color.r = r * 0.2;
		color.g = g * 0.5;
		color.b = b * 0.1;

		uv *= 4;
		id = ivec2(floor(uv.x+t*4)+1, floor(uv.y+t*4)+1);

		r = n22(vec2(id.x, id.y)).x;
		g = n22(vec2(id.x+1000, id.y)).x;
		b = n22(vec2(id.x, id.y+1000)).x;

		color.r += r * 0.2;
		color.g += g * 0.5;
		color.b += b * 0.1;

		color.r += p;
		color.g *= 1-p;

		color.rgb *= 0.1;
	}
	else if(t.effect_id == 3)
	{
		color.rgb = vec3(0.3, 0.1, 1.5);
		float n = texture(noise, v_local_uv * 0.25 + time * 0.03).r;
		float d = distance(v_local_uv, vec2(0.5));

		float a = smoothstep(0.0, 0.4, d);
		float b = smoothstep(0.2, 0.6, d);
		color.rgb *= a;
		color.rgb += b;
		color.rgb *= n;
		color.a *= smoothstep(0.499, 0.4, d);
	}
	color = pma(color);

	if(color.a <= 0) { discard; }

	out_color = color;
}

